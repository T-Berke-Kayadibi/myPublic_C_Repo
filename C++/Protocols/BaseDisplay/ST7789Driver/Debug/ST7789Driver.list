
ST7789Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b70  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08001c7c  08001c7c  00002c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002514  08002514  00004014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002514  08002514  00004014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002514  08002514  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002514  08002514  00003514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002518  08002518  00003518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800251c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000014  08002530  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002530  0000408c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005924  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b9  00000000  00000000  00009961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  0000ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016c17  00000000  00000000  0000b470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00007285  00000000  00000000  00022087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00082f73  00000000  00000000  0002930c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000ac27f  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000049a  00000000  00000000  000ac2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000017a4  00000000  00000000  000ac75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  000adf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c64 	.word	0x08001c64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001c64 	.word	0x08001c64

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbf5 	bl	8000940 <HAL_Init>
  HAL_Delay(100);
 8000156:	2064      	movs	r0, #100	@ 0x64
 8000158:	f000 fc54 	bl	8000a04 <HAL_Delay>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015c:	f000 f854 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000160:	f000 f8ce 	bl	8000300 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000164:	f000 f896 	bl	8000294 <MX_SPI1_Init>
  // MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8000168:	f000 f9ea 	bl	8000540 <ST7789_Init>

  /* --- Display Test --- */
  ST7789_Fill_Color(BLACK);
 800016c:	2000      	movs	r0, #0
 800016e:	f000 fa3b 	bl	80005e8 <ST7789_Fill_Color>

  ST7789_WriteString(10, 10, "Hello World!", Font_11x18, WHITE, BLACK);
 8000172:	4b21      	ldr	r3, [pc, #132]	@ (80001f8 <main+0xac>)
 8000174:	2200      	movs	r2, #0
 8000176:	9202      	str	r2, [sp, #8]
 8000178:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800017c:	9201      	str	r2, [sp, #4]
 800017e:	685a      	ldr	r2, [r3, #4]
 8000180:	9200      	str	r2, [sp, #0]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a1d      	ldr	r2, [pc, #116]	@ (80001fc <main+0xb0>)
 8000186:	210a      	movs	r1, #10
 8000188:	200a      	movs	r0, #10
 800018a:	f000 fa85 	bl	8000698 <ST7789_WriteString>
  ST7789_WriteString(10, 40, "ST7789 Driver", Font_11x18, YELLOW, BLACK);
 800018e:	4b1a      	ldr	r3, [pc, #104]	@ (80001f8 <main+0xac>)
 8000190:	2200      	movs	r2, #0
 8000192:	9202      	str	r2, [sp, #8]
 8000194:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000198:	9201      	str	r2, [sp, #4]
 800019a:	685a      	ldr	r2, [r3, #4]
 800019c:	9200      	str	r2, [sp, #0]
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a17      	ldr	r2, [pc, #92]	@ (8000200 <main+0xb4>)
 80001a2:	2128      	movs	r1, #40	@ 0x28
 80001a4:	200a      	movs	r0, #10
 80001a6:	f000 fa77 	bl	8000698 <ST7789_WriteString>

  // The line below was causing an "undefined reference" error, so it's removed.
  // ST7789_WriteString(10, 70, "Test OK", Font_16x26, GREEN, BLACK);
  ST7789_WriteString(10, 70, "Test OK", Font_11x18, GREEN, BLACK);
 80001aa:	4b13      	ldr	r3, [pc, #76]	@ (80001f8 <main+0xac>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	9202      	str	r2, [sp, #8]
 80001b0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80001b4:	9201      	str	r2, [sp, #4]
 80001b6:	685a      	ldr	r2, [r3, #4]
 80001b8:	9200      	str	r2, [sp, #0]
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a11      	ldr	r2, [pc, #68]	@ (8000204 <main+0xb8>)
 80001be:	2146      	movs	r1, #70	@ 0x46
 80001c0:	200a      	movs	r0, #10
 80001c2:	f000 fa69 	bl	8000698 <ST7789_WriteString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	ST7789_Fill_Color(RED);
 80001c6:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80001ca:	f000 fa0d 	bl	80005e8 <ST7789_Fill_Color>
	    HAL_Delay(1000);
 80001ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001d2:	f000 fc17 	bl	8000a04 <HAL_Delay>
	    ST7789_Fill_Color(GREEN);
 80001d6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80001da:	f000 fa05 	bl	80005e8 <ST7789_Fill_Color>
	    HAL_Delay(1000);
 80001de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001e2:	f000 fc0f 	bl	8000a04 <HAL_Delay>
	    ST7789_Fill_Color(BLUE);
 80001e6:	201f      	movs	r0, #31
 80001e8:	f000 f9fe 	bl	80005e8 <ST7789_Fill_Color>
	    HAL_Delay(1000);
 80001ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001f0:	f000 fc08 	bl	8000a04 <HAL_Delay>
	  	ST7789_Fill_Color(RED);
 80001f4:	bf00      	nop
 80001f6:	e7e6      	b.n	80001c6 <main+0x7a>
 80001f8:	20000000 	.word	0x20000000
 80001fc:	08001c7c 	.word	0x08001c7c
 8000200:	08001c8c 	.word	0x08001c8c
 8000204:	08001c9c 	.word	0x08001c9c

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	@ 0x40
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	@ 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fcf7 	bl	8001c0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800022a:	2301      	movs	r3, #1
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000232:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023c:	2302      	movs	r3, #2
 800023e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000240:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000244:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000246:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800024a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fe7b 	bl	8000f4c <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800025c:	f000 f88e 	bl	800037c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f001 f8e8 	bl	8001450 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000286:	f000 f879 	bl	800037c <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3740      	adds	r7, #64	@ 0x40
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000298:	4b17      	ldr	r3, [pc, #92]	@ (80002f8 <MX_SPI1_Init+0x64>)
 800029a:	4a18      	ldr	r2, [pc, #96]	@ (80002fc <MX_SPI1_Init+0x68>)
 800029c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800029e:	4b16      	ldr	r3, [pc, #88]	@ (80002f8 <MX_SPI1_Init+0x64>)
 80002a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80002a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002a6:	4b14      	ldr	r3, [pc, #80]	@ (80002f8 <MX_SPI1_Init+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002ac:	4b12      	ldr	r3, [pc, #72]	@ (80002f8 <MX_SPI1_Init+0x64>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002b2:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <MX_SPI1_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	@ (80002f8 <MX_SPI1_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <MX_SPI1_Init+0x64>)
 80002c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80002c6:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <MX_SPI1_Init+0x64>)
 80002c8:	2238      	movs	r2, #56	@ 0x38
 80002ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <MX_SPI1_Init+0x64>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d2:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <MX_SPI1_Init+0x64>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002d8:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <MX_SPI1_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002de:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <MX_SPI1_Init+0x64>)
 80002e0:	220a      	movs	r2, #10
 80002e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002e4:	4804      	ldr	r0, [pc, #16]	@ (80002f8 <MX_SPI1_Init+0x64>)
 80002e6:	f001 fa0f 	bl	8001708 <HAL_SPI_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002f0:	f000 f844 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000030 	.word	0x20000030
 80002fc:	40013000 	.word	0x40013000

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000314:	4b17      	ldr	r3, [pc, #92]	@ (8000374 <MX_GPIO_Init+0x74>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a16      	ldr	r2, [pc, #88]	@ (8000374 <MX_GPIO_Init+0x74>)
 800031a:	f043 0320 	orr.w	r3, r3, #32
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b14      	ldr	r3, [pc, #80]	@ (8000374 <MX_GPIO_Init+0x74>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0320 	and.w	r3, r3, #32
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_GPIO_Init+0x74>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a10      	ldr	r2, [pc, #64]	@ (8000374 <MX_GPIO_Init+0x74>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <MX_GPIO_Init+0x74>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	603b      	str	r3, [r7, #0]
 8000342:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_BLK_PIN_Pin|ST7789_DC_PIN_Pin|ST7789_RES_PIN_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	210e      	movs	r1, #14
 8000348:	480b      	ldr	r0, [pc, #44]	@ (8000378 <MX_GPIO_Init+0x78>)
 800034a:	f000 fde7 	bl	8000f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7789_BLK_PIN_Pin ST7789_DC_PIN_Pin ST7789_RES_PIN_Pin */
  GPIO_InitStruct.Pin = ST7789_BLK_PIN_Pin|ST7789_DC_PIN_Pin|ST7789_RES_PIN_Pin;
 800034e:	230e      	movs	r3, #14
 8000350:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	4619      	mov	r1, r3
 8000364:	4804      	ldr	r0, [pc, #16]	@ (8000378 <MX_GPIO_Init+0x78>)
 8000366:	f000 fc55 	bl	8000c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800036a:	bf00      	nop
 800036c:	3718      	adds	r7, #24
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000
 8000378:	40010800 	.word	0x40010800

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	// If we get here, an initialization function has failed.
	  // Let's try to signal an error on the screen.
	  // We need to re-initialize the display control pins and SPI
	  // because the error might have happened before they were ready.
	  MX_GPIO_Init();
 8000380:	f7ff ffbe 	bl	8000300 <MX_GPIO_Init>
	  MX_SPI1_Init();
 8000384:	f7ff ff86 	bl	8000294 <MX_SPI1_Init>
	  ST7789_Init(); // Attempt to re-initialize the display
 8000388:	f000 f8da 	bl	8000540 <ST7789_Init>

	  // Attempt to fill the screen with RED to indicate an error.
	  ST7789_Fill_Color(RED);
 800038c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000390:	f000 f92a 	bl	80005e8 <ST7789_Fill_Color>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000394:	b672      	cpsid	i
}
 8000396:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <Error_Handler+0x1c>

0800039c <ST7789_Reset>:
#define ST7789_DC_Clr()  HAL_GPIO_WritePin(ST7789_DC_PIN_GPIO_Port, ST7789_DC_PIN_Pin, GPIO_PIN_RESET)
#define ST7789_DC_Set()  HAL_GPIO_WritePin(ST7789_DC_PIN_GPIO_Port, ST7789_DC_PIN_Pin, GPIO_PIN_SET)
#define ST7789_BLK_Set() HAL_GPIO_WritePin(ST7789_BLK_PIN_GPIO_Port, ST7789_BLK_PIN_Pin, GPIO_PIN_SET)


static void ST7789_Reset(void) {
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
    ST7789_RES_Set();
 80003a0:	2201      	movs	r2, #1
 80003a2:	2108      	movs	r1, #8
 80003a4:	480b      	ldr	r0, [pc, #44]	@ (80003d4 <ST7789_Reset+0x38>)
 80003a6:	f000 fdb9 	bl	8000f1c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80003aa:	2032      	movs	r0, #50	@ 0x32
 80003ac:	f000 fb2a 	bl	8000a04 <HAL_Delay>
    ST7789_RES_Clr();
 80003b0:	2200      	movs	r2, #0
 80003b2:	2108      	movs	r1, #8
 80003b4:	4807      	ldr	r0, [pc, #28]	@ (80003d4 <ST7789_Reset+0x38>)
 80003b6:	f000 fdb1 	bl	8000f1c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80003ba:	2032      	movs	r0, #50	@ 0x32
 80003bc:	f000 fb22 	bl	8000a04 <HAL_Delay>
    ST7789_RES_Set();
 80003c0:	2201      	movs	r2, #1
 80003c2:	2108      	movs	r1, #8
 80003c4:	4803      	ldr	r0, [pc, #12]	@ (80003d4 <ST7789_Reset+0x38>)
 80003c6:	f000 fda9 	bl	8000f1c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80003ca:	2032      	movs	r0, #50	@ 0x32
 80003cc:	f000 fb1a 	bl	8000a04 <HAL_Delay>
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40010800 	.word	0x40010800

080003d8 <ST7789_WriteCommand>:

static void ST7789_WriteCommand(uint8_t cmd) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
    ST7789_DC_Clr();
 80003e2:	2200      	movs	r2, #0
 80003e4:	2104      	movs	r1, #4
 80003e6:	480c      	ldr	r0, [pc, #48]	@ (8000418 <ST7789_WriteCommand+0x40>)
 80003e8:	f000 fd98 	bl	8000f1c <HAL_GPIO_WritePin>
    ST7789_CS_Low();
 80003ec:	2200      	movs	r2, #0
 80003ee:	2110      	movs	r1, #16
 80003f0:	4809      	ldr	r0, [pc, #36]	@ (8000418 <ST7789_WriteCommand+0x40>)
 80003f2:	f000 fd93 	bl	8000f1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80003f6:	1df9      	adds	r1, r7, #7
 80003f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003fc:	2201      	movs	r2, #1
 80003fe:	4807      	ldr	r0, [pc, #28]	@ (800041c <ST7789_WriteCommand+0x44>)
 8000400:	f001 fa06 	bl	8001810 <HAL_SPI_Transmit>
    ST7789_CS_High();
 8000404:	2201      	movs	r2, #1
 8000406:	2110      	movs	r1, #16
 8000408:	4803      	ldr	r0, [pc, #12]	@ (8000418 <ST7789_WriteCommand+0x40>)
 800040a:	f000 fd87 	bl	8000f1c <HAL_GPIO_WritePin>
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010800 	.word	0x40010800
 800041c:	20000030 	.word	0x20000030

08000420 <ST7789_WriteData>:

static void ST7789_WriteData(uint8_t *buff, size_t buff_size) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
    ST7789_DC_Set();
 800042a:	2201      	movs	r2, #1
 800042c:	2104      	movs	r1, #4
 800042e:	480c      	ldr	r0, [pc, #48]	@ (8000460 <ST7789_WriteData+0x40>)
 8000430:	f000 fd74 	bl	8000f1c <HAL_GPIO_WritePin>
    ST7789_CS_Low();
 8000434:	2200      	movs	r2, #0
 8000436:	2110      	movs	r1, #16
 8000438:	4809      	ldr	r0, [pc, #36]	@ (8000460 <ST7789_WriteData+0x40>)
 800043a:	f000 fd6f 	bl	8000f1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	b29a      	uxth	r2, r3
 8000442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000446:	6879      	ldr	r1, [r7, #4]
 8000448:	4806      	ldr	r0, [pc, #24]	@ (8000464 <ST7789_WriteData+0x44>)
 800044a:	f001 f9e1 	bl	8001810 <HAL_SPI_Transmit>
    ST7789_CS_High();
 800044e:	2201      	movs	r2, #1
 8000450:	2110      	movs	r1, #16
 8000452:	4803      	ldr	r0, [pc, #12]	@ (8000460 <ST7789_WriteData+0x40>)
 8000454:	f000 fd62 	bl	8000f1c <HAL_GPIO_WritePin>
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40010800 	.word	0x40010800
 8000464:	20000030 	.word	0x20000030

08000468 <ST7789_WriteSmallData>:

static void ST7789_WriteSmallData(uint8_t data) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
    ST7789_DC_Set();
 8000472:	2201      	movs	r2, #1
 8000474:	2104      	movs	r1, #4
 8000476:	480c      	ldr	r0, [pc, #48]	@ (80004a8 <ST7789_WriteSmallData+0x40>)
 8000478:	f000 fd50 	bl	8000f1c <HAL_GPIO_WritePin>
    ST7789_CS_Low();
 800047c:	2200      	movs	r2, #0
 800047e:	2110      	movs	r1, #16
 8000480:	4809      	ldr	r0, [pc, #36]	@ (80004a8 <ST7789_WriteSmallData+0x40>)
 8000482:	f000 fd4b 	bl	8000f1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000486:	1df9      	adds	r1, r7, #7
 8000488:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800048c:	2201      	movs	r2, #1
 800048e:	4807      	ldr	r0, [pc, #28]	@ (80004ac <ST7789_WriteSmallData+0x44>)
 8000490:	f001 f9be 	bl	8001810 <HAL_SPI_Transmit>
    ST7789_CS_High();
 8000494:	2201      	movs	r2, #1
 8000496:	2110      	movs	r1, #16
 8000498:	4803      	ldr	r0, [pc, #12]	@ (80004a8 <ST7789_WriteSmallData+0x40>)
 800049a:	f000 fd3f 	bl	8000f1c <HAL_GPIO_WritePin>
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010800 	.word	0x40010800
 80004ac:	20000030 	.word	0x20000030

080004b0 <ST7789_SetAddressWindow>:

void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4604      	mov	r4, r0
 80004b8:	4608      	mov	r0, r1
 80004ba:	4611      	mov	r1, r2
 80004bc:	461a      	mov	r2, r3
 80004be:	4623      	mov	r3, r4
 80004c0:	80fb      	strh	r3, [r7, #6]
 80004c2:	4603      	mov	r3, r0
 80004c4:	80bb      	strh	r3, [r7, #4]
 80004c6:	460b      	mov	r3, r1
 80004c8:	807b      	strh	r3, [r7, #2]
 80004ca:	4613      	mov	r3, r2
 80004cc:	803b      	strh	r3, [r7, #0]
    uint8_t data[4];

    // Column Address Set
    ST7789_WriteCommand(0x2A);
 80004ce:	202a      	movs	r0, #42	@ 0x2a
 80004d0:	f7ff ff82 	bl	80003d8 <ST7789_WriteCommand>
    data[0] = (x0 >> 8) & 0xFF;
 80004d4:	88fb      	ldrh	r3, [r7, #6]
 80004d6:	0a1b      	lsrs	r3, r3, #8
 80004d8:	b29b      	uxth	r3, r3
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	733b      	strb	r3, [r7, #12]
    data[1] = x0 & 0xFF;
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	737b      	strb	r3, [r7, #13]
    data[2] = (x1 >> 8) & 0xFF;
 80004e4:	887b      	ldrh	r3, [r7, #2]
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	73bb      	strb	r3, [r7, #14]
    data[3] = x1 & 0xFF;
 80004ee:	887b      	ldrh	r3, [r7, #2]
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	73fb      	strb	r3, [r7, #15]
    ST7789_WriteData(data, sizeof(data));
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	2104      	movs	r1, #4
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff90 	bl	8000420 <ST7789_WriteData>

    // Row Address Set
    ST7789_WriteCommand(0x2B);
 8000500:	202b      	movs	r0, #43	@ 0x2b
 8000502:	f7ff ff69 	bl	80003d8 <ST7789_WriteCommand>
    data[0] = (y0 >> 8) & 0xFF;
 8000506:	88bb      	ldrh	r3, [r7, #4]
 8000508:	0a1b      	lsrs	r3, r3, #8
 800050a:	b29b      	uxth	r3, r3
 800050c:	b2db      	uxtb	r3, r3
 800050e:	733b      	strb	r3, [r7, #12]
    data[1] = y0 & 0xFF;
 8000510:	88bb      	ldrh	r3, [r7, #4]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	737b      	strb	r3, [r7, #13]
    data[2] = (y1 >> 8) & 0xFF;
 8000516:	883b      	ldrh	r3, [r7, #0]
 8000518:	0a1b      	lsrs	r3, r3, #8
 800051a:	b29b      	uxth	r3, r3
 800051c:	b2db      	uxtb	r3, r3
 800051e:	73bb      	strb	r3, [r7, #14]
    data[3] = y1 & 0xFF;
 8000520:	883b      	ldrh	r3, [r7, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	73fb      	strb	r3, [r7, #15]
    ST7789_WriteData(data, sizeof(data));
 8000526:	f107 030c 	add.w	r3, r7, #12
 800052a:	2104      	movs	r1, #4
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ff77 	bl	8000420 <ST7789_WriteData>

    // Write to RAM
    ST7789_WriteCommand(0x2C);
 8000532:	202c      	movs	r0, #44	@ 0x2c
 8000534:	f7ff ff50 	bl	80003d8 <ST7789_WriteCommand>
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	bd90      	pop	{r4, r7, pc}

08000540 <ST7789_Init>:

// NEW INITIALIZATION SEQUENCE BASED ON ADAFRUIT LIBRARY
void ST7789_Init(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
    ST7789_Reset();
 8000546:	f7ff ff29 	bl	800039c <ST7789_Reset>

    ST7789_WriteCommand(0x01); // Software Reset
 800054a:	2001      	movs	r0, #1
 800054c:	f7ff ff44 	bl	80003d8 <ST7789_WriteCommand>
    HAL_Delay(150);
 8000550:	2096      	movs	r0, #150	@ 0x96
 8000552:	f000 fa57 	bl	8000a04 <HAL_Delay>

    ST7789_WriteCommand(0x11); // Sleep Out
 8000556:	2011      	movs	r0, #17
 8000558:	f7ff ff3e 	bl	80003d8 <ST7789_WriteCommand>
    HAL_Delay(10);
 800055c:	200a      	movs	r0, #10
 800055e:	f000 fa51 	bl	8000a04 <HAL_Delay>

    ST7789_WriteCommand(0x3A); // Interface Pixel Format
 8000562:	203a      	movs	r0, #58	@ 0x3a
 8000564:	f7ff ff38 	bl	80003d8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x55); // 16-bit/pixel
 8000568:	2055      	movs	r0, #85	@ 0x55
 800056a:	f7ff ff7d 	bl	8000468 <ST7789_WriteSmallData>
    HAL_Delay(10);
 800056e:	200a      	movs	r0, #10
 8000570:	f000 fa48 	bl	8000a04 <HAL_Delay>

    ST7789_WriteCommand(0x36); // Memory Data Access Control
 8000574:	2036      	movs	r0, #54	@ 0x36
 8000576:	f7ff ff2f 	bl	80003d8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x00); // Default rotation
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff ff74 	bl	8000468 <ST7789_WriteSmallData>

    // These settings for a 240x240 display might need adjustment
    // if your display is different, but they are a good starting point.
    uint8_t caset[4] = {0x00, 0x00, (ST7789_WIDTH-1) >> 8, (ST7789_WIDTH-1) & 0xFF};
 8000580:	f04f 436f 	mov.w	r3, #4009754624	@ 0xef000000
 8000584:	607b      	str	r3, [r7, #4]
    ST7789_WriteCommand(0x2A); // Column Address Set
 8000586:	202a      	movs	r0, #42	@ 0x2a
 8000588:	f7ff ff26 	bl	80003d8 <ST7789_WriteCommand>
    ST7789_WriteData(caset, 4);
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2104      	movs	r1, #4
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff45 	bl	8000420 <ST7789_WriteData>

    uint8_t raset[4] = {0x00, 0x00, (ST7789_HEIGHT-1) >> 8, (ST7789_HEIGHT-1) & 0xFF};
 8000596:	f04f 436f 	mov.w	r3, #4009754624	@ 0xef000000
 800059a:	603b      	str	r3, [r7, #0]
    ST7789_WriteCommand(0x2B); // Row Address Set
 800059c:	202b      	movs	r0, #43	@ 0x2b
 800059e:	f7ff ff1b 	bl	80003d8 <ST7789_WriteCommand>
    ST7789_WriteData(raset, 4);
 80005a2:	463b      	mov	r3, r7
 80005a4:	2104      	movs	r1, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ff3a 	bl	8000420 <ST7789_WriteData>

    ST7789_WriteCommand(0x21); // Display Inversion On
 80005ac:	2021      	movs	r0, #33	@ 0x21
 80005ae:	f7ff ff13 	bl	80003d8 <ST7789_WriteCommand>
    HAL_Delay(10);
 80005b2:	200a      	movs	r0, #10
 80005b4:	f000 fa26 	bl	8000a04 <HAL_Delay>

    ST7789_WriteCommand(0x13); // Normal Display Mode On
 80005b8:	2013      	movs	r0, #19
 80005ba:	f7ff ff0d 	bl	80003d8 <ST7789_WriteCommand>
    HAL_Delay(10);
 80005be:	200a      	movs	r0, #10
 80005c0:	f000 fa20 	bl	8000a04 <HAL_Delay>

    ST7789_WriteCommand(0x29); // Display ON
 80005c4:	2029      	movs	r0, #41	@ 0x29
 80005c6:	f7ff ff07 	bl	80003d8 <ST7789_WriteCommand>
    HAL_Delay(10);
 80005ca:	200a      	movs	r0, #10
 80005cc:	f000 fa1a 	bl	8000a04 <HAL_Delay>

    ST7789_BLK_Set(); // Turn on backlight
 80005d0:	2201      	movs	r2, #1
 80005d2:	2102      	movs	r1, #2
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <ST7789_Init+0xa4>)
 80005d6:	f000 fca1 	bl	8000f1c <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40010800 	.word	0x40010800

080005e8 <ST7789_Fill_Color>:


void ST7789_Fill_Color(uint16_t color) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j;
    ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80005f2:	23ef      	movs	r3, #239	@ 0xef
 80005f4:	22ef      	movs	r2, #239	@ 0xef
 80005f6:	2100      	movs	r1, #0
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff ff59 	bl	80004b0 <ST7789_SetAddressWindow>

    for (i = 0; i < ST7789_HEIGHT; i++) {
 80005fe:	2300      	movs	r3, #0
 8000600:	81fb      	strh	r3, [r7, #14]
 8000602:	e019      	b.n	8000638 <ST7789_Fill_Color+0x50>
        for (j = 0; j < ST7789_WIDTH; j++) {
 8000604:	2300      	movs	r3, #0
 8000606:	81bb      	strh	r3, [r7, #12]
 8000608:	e010      	b.n	800062c <ST7789_Fill_Color+0x44>
            uint8_t data[] = {color >> 8, color & 0xFF};
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	b29b      	uxth	r3, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	723b      	strb	r3, [r7, #8]
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	727b      	strb	r3, [r7, #9]
            ST7789_WriteData(data, sizeof(data));
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	2102      	movs	r1, #2
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fefd 	bl	8000420 <ST7789_WriteData>
        for (j = 0; j < ST7789_WIDTH; j++) {
 8000626:	89bb      	ldrh	r3, [r7, #12]
 8000628:	3301      	adds	r3, #1
 800062a:	81bb      	strh	r3, [r7, #12]
 800062c:	89bb      	ldrh	r3, [r7, #12]
 800062e:	2bef      	cmp	r3, #239	@ 0xef
 8000630:	d9eb      	bls.n	800060a <ST7789_Fill_Color+0x22>
    for (i = 0; i < ST7789_HEIGHT; i++) {
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	3301      	adds	r3, #1
 8000636:	81fb      	strh	r3, [r7, #14]
 8000638:	89fb      	ldrh	r3, [r7, #14]
 800063a:	2bef      	cmp	r3, #239	@ 0xef
 800063c:	d9e2      	bls.n	8000604 <ST7789_Fill_Color+0x1c>
        }
    }
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <ST7789_DrawPixel>:

void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	80fb      	strh	r3, [r7, #6]
 8000652:	460b      	mov	r3, r1
 8000654:	80bb      	strh	r3, [r7, #4]
 8000656:	4613      	mov	r3, r2
 8000658:	807b      	strh	r3, [r7, #2]
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) {
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	2bef      	cmp	r3, #239	@ 0xef
 800065e:	d817      	bhi.n	8000690 <ST7789_DrawPixel+0x48>
 8000660:	88bb      	ldrh	r3, [r7, #4]
 8000662:	2bef      	cmp	r3, #239	@ 0xef
 8000664:	d814      	bhi.n	8000690 <ST7789_DrawPixel+0x48>
        return;
    }
    ST7789_SetAddressWindow(x, y, x, y);
 8000666:	88bb      	ldrh	r3, [r7, #4]
 8000668:	88fa      	ldrh	r2, [r7, #6]
 800066a:	88b9      	ldrh	r1, [r7, #4]
 800066c:	88f8      	ldrh	r0, [r7, #6]
 800066e:	f7ff ff1f 	bl	80004b0 <ST7789_SetAddressWindow>
    uint8_t data[] = {color >> 8, color & 0xFF};
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	b29b      	uxth	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	733b      	strb	r3, [r7, #12]
 800067c:	887b      	ldrh	r3, [r7, #2]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	737b      	strb	r3, [r7, #13]
    ST7789_WriteData(data, sizeof(data));
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2102      	movs	r1, #2
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fec9 	bl	8000420 <ST7789_WriteData>
 800068e:	e000      	b.n	8000692 <ST7789_DrawPixel+0x4a>
        return;
 8000690:	bf00      	nop
}
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <ST7789_WriteString>:

void ST7789_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000698:	b082      	sub	sp, #8
 800069a:	b580      	push	{r7, lr}
 800069c:	b086      	sub	sp, #24
 800069e:	af00      	add	r7, sp, #0
 80006a0:	603a      	str	r2, [r7, #0]
 80006a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80006a4:	4603      	mov	r3, r0
 80006a6:	80fb      	strh	r3, [r7, #6]
 80006a8:	460b      	mov	r3, r1
 80006aa:	80bb      	strh	r3, [r7, #4]
    while (*str) {
 80006ac:	e067      	b.n	800077e <ST7789_WriteString+0xe6>
        if (x + font.width >= ST7789_WIDTH) {
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80006b4:	4413      	add	r3, r2
 80006b6:	2bef      	cmp	r3, #239	@ 0xef
 80006b8:	dd0d      	ble.n	80006d6 <ST7789_WriteString+0x3e>
            x = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80006be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80006c2:	461a      	mov	r2, r3
 80006c4:	88bb      	ldrh	r3, [r7, #4]
 80006c6:	4413      	add	r3, r2
 80006c8:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= ST7789_HEIGHT) {
 80006ca:	88bb      	ldrh	r3, [r7, #4]
 80006cc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80006d0:	4413      	add	r3, r2
 80006d2:	2bef      	cmp	r3, #239	@ 0xef
 80006d4:	dc58      	bgt.n	8000788 <ST7789_WriteString+0xf0>
                break;
            }
        }
        // Draw character
        for (int i = 0; i < font.height; i++) {
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	e041      	b.n	8000760 <ST7789_WriteString+0xc8>
            uint16_t b = font.data[(*str - 32) * font.height + i];
 80006dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	3b20      	subs	r3, #32
 80006e4:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80006e8:	fb03 f101 	mul.w	r1, r3, r1
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	440b      	add	r3, r1
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	81fb      	strh	r3, [r7, #14]
            for (int j = 0; j < font.width; j++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	e027      	b.n	800074e <ST7789_WriteString+0xb6>
                if ((b << j) & 0x8000) {
 80006fe:	89fa      	ldrh	r2, [r7, #14]
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00e      	beq.n	800072c <ST7789_WriteString+0x94>
                    ST7789_DrawPixel(x + j, y + i, color);
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	b29a      	uxth	r2, r3
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	4413      	add	r3, r2
 8000716:	b298      	uxth	r0, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	b29a      	uxth	r2, r3
 800071c:	88bb      	ldrh	r3, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	b29b      	uxth	r3, r3
 8000722:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000724:	4619      	mov	r1, r3
 8000726:	f7ff ff8f 	bl	8000648 <ST7789_DrawPixel>
 800072a:	e00d      	b.n	8000748 <ST7789_WriteString+0xb0>
                } else {
                    ST7789_DrawPixel(x + j, y + i, bgcolor);
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	b29a      	uxth	r2, r3
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	4413      	add	r3, r2
 8000734:	b298      	uxth	r0, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	b29a      	uxth	r2, r3
 800073a:	88bb      	ldrh	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	b29b      	uxth	r3, r3
 8000740:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000742:	4619      	mov	r1, r3
 8000744:	f7ff ff80 	bl	8000648 <ST7789_DrawPixel>
            for (int j = 0; j < font.width; j++) {
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	3301      	adds	r3, #1
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000752:	461a      	mov	r2, r3
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	4293      	cmp	r3, r2
 8000758:	dbd1      	blt.n	80006fe <ST7789_WriteString+0x66>
        for (int i = 0; i < font.height; i++) {
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3301      	adds	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000764:	461a      	mov	r2, r3
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	4293      	cmp	r3, r2
 800076a:	dbb7      	blt.n	80006dc <ST7789_WriteString+0x44>
                }
            }
        }
        x += font.width;
 800076c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000770:	461a      	mov	r2, r3
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	4413      	add	r3, r2
 8000776:	80fb      	strh	r3, [r7, #6]
        str++;
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	603b      	str	r3, [r7, #0]
    while (*str) {
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d193      	bne.n	80006ae <ST7789_WriteString+0x16>
    }
}
 8000786:	e000      	b.n	800078a <ST7789_WriteString+0xf2>
                break;
 8000788:	bf00      	nop
}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000794:	b002      	add	sp, #8
 8000796:	4770      	bx	lr

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <HAL_MspInit+0x5c>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a14      	ldr	r2, [pc, #80]	@ (80007f4 <HAL_MspInit+0x5c>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <HAL_MspInit+0x5c>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <HAL_MspInit+0x5c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a0e      	ldr	r2, [pc, #56]	@ (80007f4 <HAL_MspInit+0x5c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c0:	61d3      	str	r3, [r2, #28]
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <HAL_MspInit+0x5c>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ce:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <HAL_MspInit+0x60>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <HAL_MspInit+0x60>)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010000 	.word	0x40010000

080007fc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a1b      	ldr	r2, [pc, #108]	@ (8000884 <HAL_SPI_MspInit+0x88>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d12f      	bne.n	800087c <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800081c:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <HAL_SPI_MspInit+0x8c>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a19      	ldr	r2, [pc, #100]	@ (8000888 <HAL_SPI_MspInit+0x8c>)
 8000822:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <HAL_SPI_MspInit+0x8c>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <HAL_SPI_MspInit+0x8c>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a13      	ldr	r2, [pc, #76]	@ (8000888 <HAL_SPI_MspInit+0x8c>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <HAL_SPI_MspInit+0x8c>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800084c:	23a0      	movs	r3, #160	@ 0xa0
 800084e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	4619      	mov	r1, r3
 800085e:	480b      	ldr	r0, [pc, #44]	@ (800088c <HAL_SPI_MspInit+0x90>)
 8000860:	f000 f9d8 	bl	8000c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000864:	2340      	movs	r3, #64	@ 0x40
 8000866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	4619      	mov	r1, r3
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <HAL_SPI_MspInit+0x90>)
 8000878:	f000 f9cc 	bl	8000c14 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40013000 	.word	0x40013000
 8000888:	40021000 	.word	0x40021000
 800088c:	40010800 	.word	0x40010800

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <NMI_Handler+0x4>

08000898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <MemManage_Handler+0x4>

080008a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e0:	f000 f874 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f4:	f7ff fff8 	bl	80008e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480b      	ldr	r0, [pc, #44]	@ (8000928 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008fa:	490c      	ldr	r1, [pc, #48]	@ (800092c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000930 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a09      	ldr	r2, [pc, #36]	@ (8000934 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000910:	4c09      	ldr	r4, [pc, #36]	@ (8000938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f001 f97d 	bl	8001c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000922:	f7ff fc13 	bl	800014c <main>
  bx lr
 8000926:	4770      	bx	lr
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000930:	0800251c 	.word	0x0800251c
  ldr r2, =_sbss
 8000934:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000938:	2000008c 	.word	0x2000008c

0800093c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_2_IRQHandler>
	...

08000940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <HAL_Init+0x28>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <HAL_Init+0x28>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f92b 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	200f      	movs	r0, #15
 8000958:	f000 f808 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff ff1c 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <HAL_InitTick+0x54>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_InitTick+0x58>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f935 	bl	8000bfa <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00e      	b.n	80009b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d80a      	bhi.n	80009b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009a8:	f000 f90b 	bl	8000bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <HAL_InitTick+0x5c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000010 	.word	0x20000010
 80009c8:	2000000c 	.word	0x2000000c

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a03      	ldr	r2, [pc, #12]	@ (80009ec <HAL_IncTick+0x20>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000010 	.word	0x20000010
 80009ec:	20000088 	.word	0x20000088

080009f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	@ (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000088 	.word	0x20000088

08000a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a0c:	f7ff fff0 	bl	80009f0 <HAL_GetTick>
 8000a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a1c:	d005      	beq.n	8000a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <HAL_Delay+0x44>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a2a:	bf00      	nop
 8000a2c:	f7ff ffe0 	bl	80009f0 <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d8f7      	bhi.n	8000a2c <HAL_Delay+0x28>
  {
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000010 	.word	0x20000010

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	@ (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	@ (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	@ (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	@ 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	@ 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b8c:	f7ff ff90 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff49 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff5e 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff90 	bl	8000b04 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5f 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffb0 	bl	8000b68 <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b08b      	sub	sp, #44	@ 0x2c
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c26:	e169      	b.n	8000efc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	69fa      	ldr	r2, [r7, #28]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f040 8158 	bne.w	8000ef6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	4a9a      	ldr	r2, [pc, #616]	@ (8000eb4 <HAL_GPIO_Init+0x2a0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d05e      	beq.n	8000d0e <HAL_GPIO_Init+0xfa>
 8000c50:	4a98      	ldr	r2, [pc, #608]	@ (8000eb4 <HAL_GPIO_Init+0x2a0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d875      	bhi.n	8000d42 <HAL_GPIO_Init+0x12e>
 8000c56:	4a98      	ldr	r2, [pc, #608]	@ (8000eb8 <HAL_GPIO_Init+0x2a4>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d058      	beq.n	8000d0e <HAL_GPIO_Init+0xfa>
 8000c5c:	4a96      	ldr	r2, [pc, #600]	@ (8000eb8 <HAL_GPIO_Init+0x2a4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d86f      	bhi.n	8000d42 <HAL_GPIO_Init+0x12e>
 8000c62:	4a96      	ldr	r2, [pc, #600]	@ (8000ebc <HAL_GPIO_Init+0x2a8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d052      	beq.n	8000d0e <HAL_GPIO_Init+0xfa>
 8000c68:	4a94      	ldr	r2, [pc, #592]	@ (8000ebc <HAL_GPIO_Init+0x2a8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d869      	bhi.n	8000d42 <HAL_GPIO_Init+0x12e>
 8000c6e:	4a94      	ldr	r2, [pc, #592]	@ (8000ec0 <HAL_GPIO_Init+0x2ac>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d04c      	beq.n	8000d0e <HAL_GPIO_Init+0xfa>
 8000c74:	4a92      	ldr	r2, [pc, #584]	@ (8000ec0 <HAL_GPIO_Init+0x2ac>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d863      	bhi.n	8000d42 <HAL_GPIO_Init+0x12e>
 8000c7a:	4a92      	ldr	r2, [pc, #584]	@ (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d046      	beq.n	8000d0e <HAL_GPIO_Init+0xfa>
 8000c80:	4a90      	ldr	r2, [pc, #576]	@ (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d85d      	bhi.n	8000d42 <HAL_GPIO_Init+0x12e>
 8000c86:	2b12      	cmp	r3, #18
 8000c88:	d82a      	bhi.n	8000ce0 <HAL_GPIO_Init+0xcc>
 8000c8a:	2b12      	cmp	r3, #18
 8000c8c:	d859      	bhi.n	8000d42 <HAL_GPIO_Init+0x12e>
 8000c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c94 <HAL_GPIO_Init+0x80>)
 8000c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c94:	08000d0f 	.word	0x08000d0f
 8000c98:	08000ce9 	.word	0x08000ce9
 8000c9c:	08000cfb 	.word	0x08000cfb
 8000ca0:	08000d3d 	.word	0x08000d3d
 8000ca4:	08000d43 	.word	0x08000d43
 8000ca8:	08000d43 	.word	0x08000d43
 8000cac:	08000d43 	.word	0x08000d43
 8000cb0:	08000d43 	.word	0x08000d43
 8000cb4:	08000d43 	.word	0x08000d43
 8000cb8:	08000d43 	.word	0x08000d43
 8000cbc:	08000d43 	.word	0x08000d43
 8000cc0:	08000d43 	.word	0x08000d43
 8000cc4:	08000d43 	.word	0x08000d43
 8000cc8:	08000d43 	.word	0x08000d43
 8000ccc:	08000d43 	.word	0x08000d43
 8000cd0:	08000d43 	.word	0x08000d43
 8000cd4:	08000d43 	.word	0x08000d43
 8000cd8:	08000cf1 	.word	0x08000cf1
 8000cdc:	08000d05 	.word	0x08000d05
 8000ce0:	4a79      	ldr	r2, [pc, #484]	@ (8000ec8 <HAL_GPIO_Init+0x2b4>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d013      	beq.n	8000d0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ce6:	e02c      	b.n	8000d42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	623b      	str	r3, [r7, #32]
          break;
 8000cee:	e029      	b.n	8000d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	623b      	str	r3, [r7, #32]
          break;
 8000cf8:	e024      	b.n	8000d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	3308      	adds	r3, #8
 8000d00:	623b      	str	r3, [r7, #32]
          break;
 8000d02:	e01f      	b.n	8000d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	330c      	adds	r3, #12
 8000d0a:	623b      	str	r3, [r7, #32]
          break;
 8000d0c:	e01a      	b.n	8000d44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d102      	bne.n	8000d1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d16:	2304      	movs	r3, #4
 8000d18:	623b      	str	r3, [r7, #32]
          break;
 8000d1a:	e013      	b.n	8000d44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d105      	bne.n	8000d30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d24:	2308      	movs	r3, #8
 8000d26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	611a      	str	r2, [r3, #16]
          break;
 8000d2e:	e009      	b.n	8000d44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d30:	2308      	movs	r3, #8
 8000d32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	615a      	str	r2, [r3, #20]
          break;
 8000d3a:	e003      	b.n	8000d44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
          break;
 8000d40:	e000      	b.n	8000d44 <HAL_GPIO_Init+0x130>
          break;
 8000d42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	2bff      	cmp	r3, #255	@ 0xff
 8000d48:	d801      	bhi.n	8000d4e <HAL_GPIO_Init+0x13a>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	e001      	b.n	8000d52 <HAL_GPIO_Init+0x13e>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3304      	adds	r3, #4
 8000d52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	2bff      	cmp	r3, #255	@ 0xff
 8000d58:	d802      	bhi.n	8000d60 <HAL_GPIO_Init+0x14c>
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	e002      	b.n	8000d66 <HAL_GPIO_Init+0x152>
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	3b08      	subs	r3, #8
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	210f      	movs	r1, #15
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	401a      	ands	r2, r3
 8000d78:	6a39      	ldr	r1, [r7, #32]
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	431a      	orrs	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 80b1 	beq.w	8000ef6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d94:	4b4d      	ldr	r3, [pc, #308]	@ (8000ecc <HAL_GPIO_Init+0x2b8>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a4c      	ldr	r2, [pc, #304]	@ (8000ecc <HAL_GPIO_Init+0x2b8>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b4a      	ldr	r3, [pc, #296]	@ (8000ecc <HAL_GPIO_Init+0x2b8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dac:	4a48      	ldr	r2, [pc, #288]	@ (8000ed0 <HAL_GPIO_Init+0x2bc>)
 8000dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a40      	ldr	r2, [pc, #256]	@ (8000ed4 <HAL_GPIO_Init+0x2c0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d013      	beq.n	8000e00 <HAL_GPIO_Init+0x1ec>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a3f      	ldr	r2, [pc, #252]	@ (8000ed8 <HAL_GPIO_Init+0x2c4>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d00d      	beq.n	8000dfc <HAL_GPIO_Init+0x1e8>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a3e      	ldr	r2, [pc, #248]	@ (8000edc <HAL_GPIO_Init+0x2c8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d007      	beq.n	8000df8 <HAL_GPIO_Init+0x1e4>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a3d      	ldr	r2, [pc, #244]	@ (8000ee0 <HAL_GPIO_Init+0x2cc>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d101      	bne.n	8000df4 <HAL_GPIO_Init+0x1e0>
 8000df0:	2303      	movs	r3, #3
 8000df2:	e006      	b.n	8000e02 <HAL_GPIO_Init+0x1ee>
 8000df4:	2304      	movs	r3, #4
 8000df6:	e004      	b.n	8000e02 <HAL_GPIO_Init+0x1ee>
 8000df8:	2302      	movs	r3, #2
 8000dfa:	e002      	b.n	8000e02 <HAL_GPIO_Init+0x1ee>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <HAL_GPIO_Init+0x1ee>
 8000e00:	2300      	movs	r3, #0
 8000e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e04:	f002 0203 	and.w	r2, r2, #3
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	4093      	lsls	r3, r2
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e12:	492f      	ldr	r1, [pc, #188]	@ (8000ed0 <HAL_GPIO_Init+0x2bc>)
 8000e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d006      	beq.n	8000e3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	492c      	ldr	r1, [pc, #176]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	608b      	str	r3, [r1, #8]
 8000e38:	e006      	b.n	8000e48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	4928      	ldr	r1, [pc, #160]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e54:	4b23      	ldr	r3, [pc, #140]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	4922      	ldr	r1, [pc, #136]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	60cb      	str	r3, [r1, #12]
 8000e60:	e006      	b.n	8000e70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e62:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	491e      	ldr	r1, [pc, #120]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d006      	beq.n	8000e8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	4918      	ldr	r1, [pc, #96]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	604b      	str	r3, [r1, #4]
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	4914      	ldr	r1, [pc, #80]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d021      	beq.n	8000ee8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	490e      	ldr	r1, [pc, #56]	@ (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	600b      	str	r3, [r1, #0]
 8000eb0:	e021      	b.n	8000ef6 <HAL_GPIO_Init+0x2e2>
 8000eb2:	bf00      	nop
 8000eb4:	10320000 	.word	0x10320000
 8000eb8:	10310000 	.word	0x10310000
 8000ebc:	10220000 	.word	0x10220000
 8000ec0:	10210000 	.word	0x10210000
 8000ec4:	10120000 	.word	0x10120000
 8000ec8:	10110000 	.word	0x10110000
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	40010c00 	.word	0x40010c00
 8000edc:	40011000 	.word	0x40011000
 8000ee0:	40011400 	.word	0x40011400
 8000ee4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <HAL_GPIO_Init+0x304>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	4909      	ldr	r1, [pc, #36]	@ (8000f18 <HAL_GPIO_Init+0x304>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef8:	3301      	adds	r3, #1
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f02:	fa22 f303 	lsr.w	r3, r2, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f47f ae8e 	bne.w	8000c28 <HAL_GPIO_Init+0x14>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	372c      	adds	r7, #44	@ 0x2c
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	40010400 	.word	0x40010400

08000f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f2c:	787b      	ldrb	r3, [r7, #1]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f38:	e003      	b.n	8000f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	041a      	lsls	r2, r3, #16
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	611a      	str	r2, [r3, #16]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e272      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 8087 	beq.w	800107a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f6c:	4b92      	ldr	r3, [pc, #584]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 030c 	and.w	r3, r3, #12
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d00c      	beq.n	8000f92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f78:	4b8f      	ldr	r3, [pc, #572]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d112      	bne.n	8000faa <HAL_RCC_OscConfig+0x5e>
 8000f84:	4b8c      	ldr	r3, [pc, #560]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f90:	d10b      	bne.n	8000faa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f92:	4b89      	ldr	r3, [pc, #548]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d06c      	beq.n	8001078 <HAL_RCC_OscConfig+0x12c>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d168      	bne.n	8001078 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e24c      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fb2:	d106      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x76>
 8000fb4:	4b80      	ldr	r3, [pc, #512]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a7f      	ldr	r2, [pc, #508]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	e02e      	b.n	8001020 <HAL_RCC_OscConfig+0xd4>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x98>
 8000fca:	4b7b      	ldr	r3, [pc, #492]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a7a      	ldr	r2, [pc, #488]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b78      	ldr	r3, [pc, #480]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a77      	ldr	r2, [pc, #476]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e01d      	b.n	8001020 <HAL_RCC_OscConfig+0xd4>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0xbc>
 8000fee:	4b72      	ldr	r3, [pc, #456]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a71      	ldr	r2, [pc, #452]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b6f      	ldr	r3, [pc, #444]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a6e      	ldr	r2, [pc, #440]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e00b      	b.n	8001020 <HAL_RCC_OscConfig+0xd4>
 8001008:	4b6b      	ldr	r3, [pc, #428]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a6a      	ldr	r2, [pc, #424]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 800100e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b68      	ldr	r3, [pc, #416]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a67      	ldr	r2, [pc, #412]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 800101a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800101e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d013      	beq.n	8001050 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fce2 	bl	80009f0 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fcde 	bl	80009f0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	@ 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e200      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	4b5d      	ldr	r3, [pc, #372]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0xe4>
 800104e:	e014      	b.n	800107a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fcce 	bl	80009f0 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fcca 	bl	80009f0 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	@ 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e1ec      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106a:	4b53      	ldr	r3, [pc, #332]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x10c>
 8001076:	e000      	b.n	800107a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d063      	beq.n	800114e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001086:	4b4c      	ldr	r3, [pc, #304]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00b      	beq.n	80010aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001092:	4b49      	ldr	r3, [pc, #292]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b08      	cmp	r3, #8
 800109c:	d11c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x18c>
 800109e:	4b46      	ldr	r3, [pc, #280]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d116      	bne.n	80010d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010aa:	4b43      	ldr	r3, [pc, #268]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <HAL_RCC_OscConfig+0x176>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d001      	beq.n	80010c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e1c0      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c2:	4b3d      	ldr	r3, [pc, #244]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4939      	ldr	r1, [pc, #228]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d6:	e03a      	b.n	800114e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d020      	beq.n	8001122 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e0:	4b36      	ldr	r3, [pc, #216]	@ (80011bc <HAL_RCC_OscConfig+0x270>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff fc83 	bl	80009f0 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fc7f 	bl	80009f0 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e1a1      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	4b2d      	ldr	r3, [pc, #180]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110c:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4927      	ldr	r1, [pc, #156]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 800111c:	4313      	orrs	r3, r2
 800111e:	600b      	str	r3, [r1, #0]
 8001120:	e015      	b.n	800114e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001122:	4b26      	ldr	r3, [pc, #152]	@ (80011bc <HAL_RCC_OscConfig+0x270>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fc62 	bl	80009f0 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001130:	f7ff fc5e 	bl	80009f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e180      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f0      	bne.n	8001130 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d03a      	beq.n	80011d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d019      	beq.n	8001196 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001162:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <HAL_RCC_OscConfig+0x274>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001168:	f7ff fc42 	bl	80009f0 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fc3e 	bl	80009f0 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e160      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <HAL_RCC_OscConfig+0x26c>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f000 fa9c 	bl	80016cc <RCC_Delay>
 8001194:	e01c      	b.n	80011d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <HAL_RCC_OscConfig+0x274>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119c:	f7ff fc28 	bl	80009f0 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a2:	e00f      	b.n	80011c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fc24 	bl	80009f0 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d908      	bls.n	80011c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e146      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	42420000 	.word	0x42420000
 80011c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c4:	4b92      	ldr	r3, [pc, #584]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1e9      	bne.n	80011a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80a6 	beq.w	800132a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10d      	bne.n	800120a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b88      	ldr	r3, [pc, #544]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a87      	ldr	r2, [pc, #540]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b85      	ldr	r3, [pc, #532]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001206:	2301      	movs	r3, #1
 8001208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120a:	4b82      	ldr	r3, [pc, #520]	@ (8001414 <HAL_RCC_OscConfig+0x4c8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001212:	2b00      	cmp	r3, #0
 8001214:	d118      	bne.n	8001248 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001216:	4b7f      	ldr	r3, [pc, #508]	@ (8001414 <HAL_RCC_OscConfig+0x4c8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a7e      	ldr	r2, [pc, #504]	@ (8001414 <HAL_RCC_OscConfig+0x4c8>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001222:	f7ff fbe5 	bl	80009f0 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122a:	f7ff fbe1 	bl	80009f0 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b64      	cmp	r3, #100	@ 0x64
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e103      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123c:	4b75      	ldr	r3, [pc, #468]	@ (8001414 <HAL_RCC_OscConfig+0x4c8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d106      	bne.n	800125e <HAL_RCC_OscConfig+0x312>
 8001250:	4b6f      	ldr	r3, [pc, #444]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a6e      	ldr	r2, [pc, #440]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6213      	str	r3, [r2, #32]
 800125c:	e02d      	b.n	80012ba <HAL_RCC_OscConfig+0x36e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x334>
 8001266:	4b6a      	ldr	r3, [pc, #424]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	4a69      	ldr	r2, [pc, #420]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	f023 0301 	bic.w	r3, r3, #1
 8001270:	6213      	str	r3, [r2, #32]
 8001272:	4b67      	ldr	r3, [pc, #412]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4a66      	ldr	r2, [pc, #408]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	f023 0304 	bic.w	r3, r3, #4
 800127c:	6213      	str	r3, [r2, #32]
 800127e:	e01c      	b.n	80012ba <HAL_RCC_OscConfig+0x36e>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b05      	cmp	r3, #5
 8001286:	d10c      	bne.n	80012a2 <HAL_RCC_OscConfig+0x356>
 8001288:	4b61      	ldr	r3, [pc, #388]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	4a60      	ldr	r2, [pc, #384]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6213      	str	r3, [r2, #32]
 8001294:	4b5e      	ldr	r3, [pc, #376]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4a5d      	ldr	r2, [pc, #372]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6213      	str	r3, [r2, #32]
 80012a0:	e00b      	b.n	80012ba <HAL_RCC_OscConfig+0x36e>
 80012a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6213      	str	r3, [r2, #32]
 80012ae:	4b58      	ldr	r3, [pc, #352]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4a57      	ldr	r2, [pc, #348]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	f023 0304 	bic.w	r3, r3, #4
 80012b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d015      	beq.n	80012ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fb95 	bl	80009f0 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	e00a      	b.n	80012e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7ff fb91 	bl	80009f0 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e0b1      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0ee      	beq.n	80012ca <HAL_RCC_OscConfig+0x37e>
 80012ec:	e014      	b.n	8001318 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fb7f 	bl	80009f0 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f4:	e00a      	b.n	800130c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff fb7b 	bl	80009f0 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001304:	4293      	cmp	r3, r2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e09b      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130c:	4b40      	ldr	r3, [pc, #256]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1ee      	bne.n	80012f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d105      	bne.n	800132a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131e:	4b3c      	ldr	r3, [pc, #240]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a3b      	ldr	r2, [pc, #236]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001328:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8087 	beq.w	8001442 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001334:	4b36      	ldr	r3, [pc, #216]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b08      	cmp	r3, #8
 800133e:	d061      	beq.n	8001404 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d146      	bne.n	80013d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001348:	4b33      	ldr	r3, [pc, #204]	@ (8001418 <HAL_RCC_OscConfig+0x4cc>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fb4f 	bl	80009f0 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff fb4b 	bl	80009f0 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e06d      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001368:	4b29      	ldr	r3, [pc, #164]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800137c:	d108      	bne.n	8001390 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800137e:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	4921      	ldr	r1, [pc, #132]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001390:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a19      	ldr	r1, [r3, #32]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a0:	430b      	orrs	r3, r1
 80013a2:	491b      	ldr	r1, [pc, #108]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <HAL_RCC_OscConfig+0x4cc>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fb1f 	bl	80009f0 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b6:	f7ff fb1b 	bl	80009f0 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e03d      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x46a>
 80013d4:	e035      	b.n	8001442 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <HAL_RCC_OscConfig+0x4cc>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fb08 	bl	80009f0 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff fb04 	bl	80009f0 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e026      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x498>
 8001402:	e01e      	b.n	8001442 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d107      	bne.n	800141c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e019      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
 8001410:	40021000 	.word	0x40021000
 8001414:	40007000 	.word	0x40007000
 8001418:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800141c:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <HAL_RCC_OscConfig+0x500>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	429a      	cmp	r2, r3
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0d0      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001464:	4b6a      	ldr	r3, [pc, #424]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d910      	bls.n	8001494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b67      	ldr	r3, [pc, #412]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 0207 	bic.w	r2, r3, #7
 800147a:	4965      	ldr	r1, [pc, #404]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b63      	ldr	r3, [pc, #396]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0b8      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ac:	4b59      	ldr	r3, [pc, #356]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a58      	ldr	r2, [pc, #352]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c4:	4b53      	ldr	r3, [pc, #332]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a52      	ldr	r2, [pc, #328]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d0:	4b50      	ldr	r3, [pc, #320]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	494d      	ldr	r1, [pc, #308]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d040      	beq.n	8001570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b47      	ldr	r3, [pc, #284]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d115      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e07f      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150e:	4b41      	ldr	r3, [pc, #260]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e073      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151e:	4b3d      	ldr	r3, [pc, #244]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e06b      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152e:	4b39      	ldr	r3, [pc, #228]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f023 0203 	bic.w	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4936      	ldr	r1, [pc, #216]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001540:	f7ff fa56 	bl	80009f0 <HAL_GetTick>
 8001544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	e00a      	b.n	800155e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001548:	f7ff fa52 	bl	80009f0 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e053      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	4b2d      	ldr	r3, [pc, #180]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 020c 	and.w	r2, r3, #12
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	429a      	cmp	r2, r3
 800156e:	d1eb      	bne.n	8001548 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001570:	4b27      	ldr	r3, [pc, #156]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d210      	bcs.n	80015a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 0207 	bic.w	r2, r3, #7
 8001586:	4922      	ldr	r1, [pc, #136]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e032      	b.n	8001606 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ac:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4916      	ldr	r1, [pc, #88]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d009      	beq.n	80015de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ca:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	490e      	ldr	r1, [pc, #56]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015de:	f000 f821 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	490a      	ldr	r1, [pc, #40]	@ (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80015f0:	5ccb      	ldrb	r3, [r1, r3]
 80015f2:	fa22 f303 	lsr.w	r3, r2, r3
 80015f6:	4a09      	ldr	r2, [pc, #36]	@ (800161c <HAL_RCC_ClockConfig+0x1cc>)
 80015f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_RCC_ClockConfig+0x1d0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff f9b4 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40022000 	.word	0x40022000
 8001614:	40021000 	.word	0x40021000
 8001618:	080024f0 	.word	0x080024f0
 800161c:	20000008 	.word	0x20000008
 8001620:	2000000c 	.word	0x2000000c

08001624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800163e:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b04      	cmp	r3, #4
 800164c:	d002      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x30>
 800164e:	2b08      	cmp	r3, #8
 8001650:	d003      	beq.n	800165a <HAL_RCC_GetSysClockFreq+0x36>
 8001652:	e027      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001656:	613b      	str	r3, [r7, #16]
      break;
 8001658:	e027      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	0c9b      	lsrs	r3, r3, #18
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d010      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	0c5b      	lsrs	r3, r3, #17
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	4a11      	ldr	r2, [pc, #68]	@ (80016c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800167e:	5cd3      	ldrb	r3, [r2, r3]
 8001680:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001686:	fb03 f202 	mul.w	r2, r3, r2
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e004      	b.n	800169e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	613b      	str	r3, [r7, #16]
      break;
 80016a2:	e002      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_RCC_GetSysClockFreq+0x98>)
 80016a6:	613b      	str	r3, [r7, #16]
      break;
 80016a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016aa:	693b      	ldr	r3, [r7, #16]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	007a1200 	.word	0x007a1200
 80016c0:	08002500 	.word	0x08002500
 80016c4:	08002510 	.word	0x08002510
 80016c8:	003d0900 	.word	0x003d0900

080016cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <RCC_Delay+0x34>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <RCC_Delay+0x38>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	0a5b      	lsrs	r3, r3, #9
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
 80016e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016e8:	bf00      	nop
  }
  while (Delay --);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1e5a      	subs	r2, r3, #1
 80016ee:	60fa      	str	r2, [r7, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f9      	bne.n	80016e8 <RCC_Delay+0x1c>
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	20000008 	.word	0x20000008
 8001704:	10624dd3 	.word	0x10624dd3

08001708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e076      	b.n	8001808 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	2b00      	cmp	r3, #0
 8001720:	d108      	bne.n	8001734 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800172a:	d009      	beq.n	8001740 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
 8001732:	e005      	b.n	8001740 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d106      	bne.n	8001760 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff f84e 	bl	80007fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001776:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c4:	ea42 0103 	orr.w	r1, r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	0c1a      	lsrs	r2, r3, #16
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f002 0204 	and.w	r2, r2, #4
 80017e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	4613      	mov	r3, r2
 800181e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001820:	f7ff f8e6 	bl	80009f0 <HAL_GetTick>
 8001824:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d001      	beq.n	800183a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001836:	2302      	movs	r3, #2
 8001838:	e12a      	b.n	8001a90 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <HAL_SPI_Transmit+0x36>
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e122      	b.n	8001a90 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_SPI_Transmit+0x48>
 8001854:	2302      	movs	r3, #2
 8001856:	e11b      	b.n	8001a90 <HAL_SPI_Transmit+0x280>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2203      	movs	r2, #3
 8001864:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	88fa      	ldrh	r2, [r7, #6]
 8001878:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	88fa      	ldrh	r2, [r7, #6]
 800187e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018a6:	d10f      	bne.n	80018c8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d2:	2b40      	cmp	r3, #64	@ 0x40
 80018d4:	d007      	beq.n	80018e6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018ee:	d152      	bne.n	8001996 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <HAL_SPI_Transmit+0xee>
 80018f8:	8b7b      	ldrh	r3, [r7, #26]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d145      	bne.n	800198a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	881a      	ldrh	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	1c9a      	adds	r2, r3, #2
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001922:	e032      	b.n	800198a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b02      	cmp	r3, #2
 8001930:	d112      	bne.n	8001958 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	881a      	ldrh	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	1c9a      	adds	r2, r3, #2
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001956:	e018      	b.n	800198a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001958:	f7ff f84a 	bl	80009f0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d803      	bhi.n	8001970 <HAL_SPI_Transmit+0x160>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800196e:	d102      	bne.n	8001976 <HAL_SPI_Transmit+0x166>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e082      	b.n	8001a90 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800198e:	b29b      	uxth	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1c7      	bne.n	8001924 <HAL_SPI_Transmit+0x114>
 8001994:	e053      	b.n	8001a3e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_SPI_Transmit+0x194>
 800199e:	8b7b      	ldrh	r3, [r7, #26]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d147      	bne.n	8001a34 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	330c      	adds	r3, #12
 80019ae:	7812      	ldrb	r2, [r2, #0]
 80019b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80019ca:	e033      	b.n	8001a34 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d113      	bne.n	8001a02 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	330c      	adds	r3, #12
 80019e4:	7812      	ldrb	r2, [r2, #0]
 80019e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001a00:	e018      	b.n	8001a34 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a02:	f7fe fff5 	bl	80009f0 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d803      	bhi.n	8001a1a <HAL_SPI_Transmit+0x20a>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a18:	d102      	bne.n	8001a20 <HAL_SPI_Transmit+0x210>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e02d      	b.n	8001a90 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1c6      	bne.n	80019cc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	6839      	ldr	r1, [r7, #0]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f8b0 	bl	8001ba8 <SPI_EndRxTxTransaction>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2220      	movs	r2, #32
 8001a52:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10a      	bne.n	8001a72 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
  }
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001aa8:	f7fe ffa2 	bl	80009f0 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ab8:	f7fe ff9a 	bl	80009f0 <HAL_GetTick>
 8001abc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001abe:	4b39      	ldr	r3, [pc, #228]	@ (8001ba4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	015b      	lsls	r3, r3, #5
 8001ac4:	0d1b      	lsrs	r3, r3, #20
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ace:	e054      	b.n	8001b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ad6:	d050      	beq.n	8001b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ad8:	f7fe ff8a 	bl	80009f0 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d902      	bls.n	8001aee <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d13d      	bne.n	8001b6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001afc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b06:	d111      	bne.n	8001b2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b10:	d004      	beq.n	8001b1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b1a:	d107      	bne.n	8001b2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b34:	d10f      	bne.n	8001b56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e017      	b.n	8001b9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4013      	ands	r3, r2
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	bf0c      	ite	eq
 8001b8a:	2301      	moveq	r3, #1
 8001b8c:	2300      	movne	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d19b      	bne.n	8001ad0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008

08001ba8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff ff6a 	bl	8001a98 <SPI_WaitFlagStateUntilTimeout>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bce:	f043 0220 	orr.w	r2, r3, #32
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e013      	b.n	8001c02 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2200      	movs	r2, #0
 8001be2:	2180      	movs	r1, #128	@ 0x80
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f7ff ff57 	bl	8001a98 <SPI_WaitFlagStateUntilTimeout>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf4:	f043 0220 	orr.w	r2, r3, #32
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <memset>:
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4402      	add	r2, r0
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d100      	bne.n	8001c14 <memset+0xa>
 8001c12:	4770      	bx	lr
 8001c14:	f803 1b01 	strb.w	r1, [r3], #1
 8001c18:	e7f9      	b.n	8001c0e <memset+0x4>
	...

08001c1c <__libc_init_array>:
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	2600      	movs	r6, #0
 8001c20:	4d0c      	ldr	r5, [pc, #48]	@ (8001c54 <__libc_init_array+0x38>)
 8001c22:	4c0d      	ldr	r4, [pc, #52]	@ (8001c58 <__libc_init_array+0x3c>)
 8001c24:	1b64      	subs	r4, r4, r5
 8001c26:	10a4      	asrs	r4, r4, #2
 8001c28:	42a6      	cmp	r6, r4
 8001c2a:	d109      	bne.n	8001c40 <__libc_init_array+0x24>
 8001c2c:	f000 f81a 	bl	8001c64 <_init>
 8001c30:	2600      	movs	r6, #0
 8001c32:	4d0a      	ldr	r5, [pc, #40]	@ (8001c5c <__libc_init_array+0x40>)
 8001c34:	4c0a      	ldr	r4, [pc, #40]	@ (8001c60 <__libc_init_array+0x44>)
 8001c36:	1b64      	subs	r4, r4, r5
 8001c38:	10a4      	asrs	r4, r4, #2
 8001c3a:	42a6      	cmp	r6, r4
 8001c3c:	d105      	bne.n	8001c4a <__libc_init_array+0x2e>
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}
 8001c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c44:	4798      	blx	r3
 8001c46:	3601      	adds	r6, #1
 8001c48:	e7ee      	b.n	8001c28 <__libc_init_array+0xc>
 8001c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c4e:	4798      	blx	r3
 8001c50:	3601      	adds	r6, #1
 8001c52:	e7f2      	b.n	8001c3a <__libc_init_array+0x1e>
 8001c54:	08002514 	.word	0x08002514
 8001c58:	08002514 	.word	0x08002514
 8001c5c:	08002514 	.word	0x08002514
 8001c60:	08002518 	.word	0x08002518

08001c64 <_init>:
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c66:	bf00      	nop
 8001c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c6a:	bc08      	pop	{r3}
 8001c6c:	469e      	mov	lr, r3
 8001c6e:	4770      	bx	lr

08001c70 <_fini>:
 8001c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c72:	bf00      	nop
 8001c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c76:	bc08      	pop	{r3}
 8001c78:	469e      	mov	lr, r3
 8001c7a:	4770      	bx	lr
